# Seeds for failure cases proptest has generated in the past. It is
# automatically read and these particular cases re-run before any
# novel cases are generated.
#
# It is recommended to check this file in to source control so that
# everyone who runs the test benefits from these saved cases.
cc 8bd0f5c261309fb2ee37b30b74e9991d23b8faebeb1cdc4c093267418b8f2def # shrinks to inputs = [ErgoBox { box_id: BoxId(Digest32([192, 169, 0, 117, 37, 2, 92, 55, 182, 174, 94, 69, 47, 33, 232, 18, 103, 232, 166, 28, 148, 73, 133, 10, 52, 224, 177, 244, 135, 12, 11, 3])), value: BoxValue(27740066), ergo_tree: ErgoTree { header: ErgoTreeHeader(0), tree: Ok(ParsedTree { constants: [], root: Ok(Const(Constant { tpe: SSigmaProp, v: SigmaProp(SigmaProp(ProofOfKnowledge(ProveDlog(ProveDlog { h: EcPoint(ProjectivePoint { x: FieldElement(FieldElementImpl { value: FieldElement5x52([705178180786072, 3855836460717471, 4089131105950716, 3301581525494108, 133858670344668]), magnitude: 1, normalized: true }), y: FieldElement(FieldElementImpl { value: FieldElement5x52([2199641648059576, 1278080618437060, 3959378566518708, 3455034269351872, 79417610544803]), magnitude: 1, normalized: true }), z: FieldElement(FieldElementImpl { value: FieldElement5x52([1, 0, 0, 0, 0]), magnitude: 1, normalized: true }) }) })))) })) }) }, tokens: [], additional_registers: NonMandatoryRegisters([]), creation_height: 0, transaction_id: TxId(Digest32([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])), index: 0 }], outputs = [ErgoBoxCandidate { value: BoxValue(13356530), ergo_tree: ErgoTree { header: ErgoTreeHeader(0), tree: Ok(ParsedTree { constants: [], root: Ok(Const(Constant { tpe: SSigmaProp, v: SigmaProp(SigmaProp(ProofOfKnowledge(ProveDlog(ProveDlog { h: EcPoint(ProjectivePoint { x: FieldElement(FieldElementImpl { value: FieldElement5x52([705178180786072, 3855836460717471, 4089131105950716, 3301581525494108, 133858670344668]), magnitude: 1, normalized: true }), y: FieldElement(FieldElementImpl { value: FieldElement5x52([2199641648059576, 1278080618437060, 3959378566518708, 3455034269351872, 79417610544803]), magnitude: 1, normalized: true }), z: FieldElement(FieldElementImpl { value: FieldElement5x52([1, 0, 0, 0, 0]), magnitude: 1, normalized: true }) }) })))) })) }) }, tokens: [], additional_registers: NonMandatoryRegisters([]), creation_height: 0 }], change_address = P2PK(ProveDlog { h: EcPoint(ProjectivePoint { x: FieldElement(FieldElementImpl { value: FieldElement5x52([705178180786072, 3855836460717471, 4089131105950716, 3301581525494108, 133858670344668]), magnitude: 1, normalized: true }), y: FieldElement(FieldElementImpl { value: FieldElement5x52([2199641648059576, 1278080618437060, 3959378566518708, 3455034269351872, 79417610544803]), magnitude: 1, normalized: true }), z: FieldElement(FieldElementImpl { value: FieldElement5x52([1, 0, 0, 0, 0]), magnitude: 1, normalized: true }) }) }), miners_fee = BoxValue(14368777)
cc 202e4da03d96c5ce67e6c229a270638be71a51f2ef86dc70c2e121cbdf75b782 # shrinks to inputs = [ErgoBox { box_id: BoxId(Digest32([71, 138, 231, 27, 15, 127, 230, 252, 65, 149, 214, 218, 25, 86, 145, 54, 2, 11, 164, 211, 227, 204, 2, 29, 19, 152, 230, 90, 118, 164, 104, 118])), value: BoxValue(22258517), ergo_tree: ErgoTree { header: ErgoTreeHeader(0), tree: Ok(ParsedTree { constants: [], root: Ok(Const(Constant { tpe: SSigmaProp, v: SigmaProp(SigmaProp(ProofOfKnowledge(ProveDlog(ProveDlog { h: EcPoint(ProjectivePoint { x: FieldElement(FieldElementImpl { value: FieldElement5x52([705178180786072, 3855836460717471, 4089131105950716, 3301581525494108, 133858670344668]), magnitude: 1, normalized: true }), y: FieldElement(FieldElementImpl { value: FieldElement5x52([2199641648059576, 1278080618437060, 3959378566518708, 3455034269351872, 79417610544803]), magnitude: 1, normalized: true }), z: FieldElement(FieldElementImpl { value: FieldElement5x52([1, 0, 0, 0, 0]), magnitude: 1, normalized: true }) }) })))) })) }) }, tokens: [], additional_registers: NonMandatoryRegisters([]), creation_height: 0, transaction_id: TxId(Digest32([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])), index: 0 }], outputs = [ErgoBoxCandidate { value: BoxValue(20403935), ergo_tree: ErgoTree { header: ErgoTreeHeader(0), tree: Ok(ParsedTree { constants: [], root: Ok(Const(Constant { tpe: SSigmaProp, v: SigmaProp(SigmaProp(ProofOfKnowledge(ProveDlog(ProveDlog { h: EcPoint(ProjectivePoint { x: FieldElement(FieldElementImpl { value: FieldElement5x52([705178180786072, 3855836460717471, 4089131105950716, 3301581525494108, 133858670344668]), magnitude: 1, normalized: true }), y: FieldElement(FieldElementImpl { value: FieldElement5x52([2199641648059576, 1278080618437060, 3959378566518708, 3455034269351872, 79417610544803]), magnitude: 1, normalized: true }), z: FieldElement(FieldElementImpl { value: FieldElement5x52([1, 0, 0, 0, 0]), magnitude: 1, normalized: true }) }) })))) })) }) }, tokens: [], additional_registers: NonMandatoryRegisters([]), creation_height: 0 }], change_address = P2PK(ProveDlog { h: EcPoint(ProjectivePoint { x: FieldElement(FieldElementImpl { value: FieldElement5x52([705178180786072, 3855836460717471, 4089131105950716, 3301581525494108, 133858670344668]), magnitude: 1, normalized: true }), y: FieldElement(FieldElementImpl { value: FieldElement5x52([2199641648059576, 1278080618437060, 3959378566518708, 3455034269351872, 79417610544803]), magnitude: 1, normalized: true }), z: FieldElement(FieldElementImpl { value: FieldElement5x52([1, 0, 0, 0, 0]), magnitude: 1, normalized: true }) }) }), miners_fee = BoxValue(1839823)
