//! ProverResult
use std::io;

use super::context_extension::ContextExtension;
use super::{Base16DecodedBytes, Base16EncodedBytes};
use crate::serialization::{
    sigma_byte_reader::SigmaByteRead, sigma_byte_writer::SigmaByteWrite, SerializationError,
    SigmaSerializable,
};
#[cfg(feature = "with-serde")]
use serde::{Deserialize, Serialize};

/// Serialized proof generated by ['Prover']
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
#[cfg_attr(
    feature = "with-serde",
    serde(into = "Base16EncodedBytes", try_from = "Base16DecodedBytes")
)]
#[derive(PartialEq, Eq, Hash, Debug, Clone)]
pub struct ProofBytes(pub Vec<u8>);

// TODO: enum with EmptyProof element?

impl ProofBytes {
    /// Empty proof
    pub fn empty() -> ProofBytes {
        ProofBytes(vec![])
    }
}

impl Into<Base16EncodedBytes> for ProofBytes {
    fn into(self) -> Base16EncodedBytes {
        Base16EncodedBytes::new(&self.0)
    }
}

impl From<Base16DecodedBytes> for ProofBytes {
    fn from(v: Base16DecodedBytes) -> Self {
        ProofBytes(v.0)
    }
}

impl SigmaSerializable for ProofBytes {
    fn sigma_serialize<W: SigmaByteWrite>(&self, w: &mut W) -> Result<(), io::Error> {
        w.put_u16(self.0.len() as u16)?;
        w.write_all(&self.0)?;
        Ok(())
    }
    fn sigma_parse<R: SigmaByteRead>(r: &mut R) -> Result<Self, SerializationError> {
        let proof_len = r.get_u16()?;
        let mut proof = vec![0; proof_len as usize];
        r.read_exact(&mut proof)?;
        Ok(ProofBytes(proof))
    }
}

/// Proof of correctness of tx spending
#[derive(Debug, PartialEq, Eq, Clone)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct ProverResult {
    /// proof that satisfies final sigma proposition
    #[cfg_attr(feature = "with-serde", serde(rename = "proofBytes"))]
    pub proof: ProofBytes,
    /// user-defined variables to be put into context
    #[cfg_attr(feature = "with-serde", serde(rename = "extension"))]
    pub extension: ContextExtension,
}

impl SigmaSerializable for ProverResult {
    fn sigma_serialize<W: SigmaByteWrite>(&self, w: &mut W) -> Result<(), io::Error> {
        self.proof.sigma_serialize(w)?;
        self.extension.sigma_serialize(w)?;
        Ok(())
    }
    fn sigma_parse<R: SigmaByteRead>(r: &mut R) -> Result<Self, SerializationError> {
        let proof = ProofBytes::sigma_parse(r)?;
        let extension = ContextExtension::sigma_parse(r)?;
        Ok(ProverResult { proof, extension })
    }
}

#[cfg(test)]
mod tests {
    use super::*;
    use crate::serialization::sigma_serialize_roundtrip;
    use proptest::{collection::vec, prelude::*};

    impl Arbitrary for ProofBytes {
        type Parameters = ();
        type Strategy = BoxedStrategy<Self>;

        fn arbitrary_with(_args: Self::Parameters) -> Self::Strategy {
            (vec(any::<u8>(), 0..100)).prop_map(Self).boxed()
        }
    }

    impl Arbitrary for ProverResult {
        type Parameters = ();
        type Strategy = BoxedStrategy<Self>;

        fn arbitrary_with(_args: Self::Parameters) -> Self::Strategy {
            (any::<ProofBytes>(), any::<ContextExtension>())
                .prop_map(|(proof, extension)| Self { proof, extension })
                .boxed()
        }
    }
    proptest! {

        #[test]
        fn ser_roundtrip(v in any::<ProverResult>()) {
            prop_assert_eq![sigma_serialize_roundtrip(&v), v];
        }
    }
}
