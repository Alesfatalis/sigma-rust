# Seeds for failure cases proptest has generated in the past. It is
# automatically read and these particular cases re-run before any
# novel cases are generated.
#
# It is recommended to check this file in to source control so that
# everyone who runs the test benefits from these saved cases.
cc 8bd0f5c261309fb2ee37b30b74e9991d23b8faebeb1cdc4c093267418b8f2def # shrinks to inputs = [ErgoBox { box_id: BoxId(Digest32([192, 169, 0, 117, 37, 2, 92, 55, 182, 174, 94, 69, 47, 33, 232, 18, 103, 232, 166, 28, 148, 73, 133, 10, 52, 224, 177, 244, 135, 12, 11, 3])), value: BoxValue(27740066), ergo_tree: ErgoTree { header: ErgoTreeHeader(0), tree: Ok(ParsedTree { constants: [], root: Ok(Const(Constant { tpe: SSigmaProp, v: SigmaProp(SigmaProp(ProofOfKnowledge(ProveDlog(ProveDlog { h: EcPoint(ProjectivePoint { x: FieldElement(FieldElementImpl { value: FieldElement5x52([705178180786072, 3855836460717471, 4089131105950716, 3301581525494108, 133858670344668]), magnitude: 1, normalized: true }), y: FieldElement(FieldElementImpl { value: FieldElement5x52([2199641648059576, 1278080618437060, 3959378566518708, 3455034269351872, 79417610544803]), magnitude: 1, normalized: true }), z: FieldElement(FieldElementImpl { value: FieldElement5x52([1, 0, 0, 0, 0]), magnitude: 1, normalized: true }) }) })))) })) }) }, tokens: [], additional_registers: NonMandatoryRegisters([]), creation_height: 0, transaction_id: TxId(Digest32([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])), index: 0 }], outputs = [ErgoBoxCandidate { value: BoxValue(13356530), ergo_tree: ErgoTree { header: ErgoTreeHeader(0), tree: Ok(ParsedTree { constants: [], root: Ok(Const(Constant { tpe: SSigmaProp, v: SigmaProp(SigmaProp(ProofOfKnowledge(ProveDlog(ProveDlog { h: EcPoint(ProjectivePoint { x: FieldElement(FieldElementImpl { value: FieldElement5x52([705178180786072, 3855836460717471, 4089131105950716, 3301581525494108, 133858670344668]), magnitude: 1, normalized: true }), y: FieldElement(FieldElementImpl { value: FieldElement5x52([2199641648059576, 1278080618437060, 3959378566518708, 3455034269351872, 79417610544803]), magnitude: 1, normalized: true }), z: FieldElement(FieldElementImpl { value: FieldElement5x52([1, 0, 0, 0, 0]), magnitude: 1, normalized: true }) }) })))) })) }) }, tokens: [], additional_registers: NonMandatoryRegisters([]), creation_height: 0 }], change_address = P2PK(ProveDlog { h: EcPoint(ProjectivePoint { x: FieldElement(FieldElementImpl { value: FieldElement5x52([705178180786072, 3855836460717471, 4089131105950716, 3301581525494108, 133858670344668]), magnitude: 1, normalized: true }), y: FieldElement(FieldElementImpl { value: FieldElement5x52([2199641648059576, 1278080618437060, 3959378566518708, 3455034269351872, 79417610544803]), magnitude: 1, normalized: true }), z: FieldElement(FieldElementImpl { value: FieldElement5x52([1, 0, 0, 0, 0]), magnitude: 1, normalized: true }) }) }), miners_fee = BoxValue(14368777)
cc 202e4da03d96c5ce67e6c229a270638be71a51f2ef86dc70c2e121cbdf75b782 # shrinks to inputs = [ErgoBox { box_id: BoxId(Digest32([71, 138, 231, 27, 15, 127, 230, 252, 65, 149, 214, 218, 25, 86, 145, 54, 2, 11, 164, 211, 227, 204, 2, 29, 19, 152, 230, 90, 118, 164, 104, 118])), value: BoxValue(22258517), ergo_tree: ErgoTree { header: ErgoTreeHeader(0), tree: Ok(ParsedTree { constants: [], root: Ok(Const(Constant { tpe: SSigmaProp, v: SigmaProp(SigmaProp(ProofOfKnowledge(ProveDlog(ProveDlog { h: EcPoint(ProjectivePoint { x: FieldElement(FieldElementImpl { value: FieldElement5x52([705178180786072, 3855836460717471, 4089131105950716, 3301581525494108, 133858670344668]), magnitude: 1, normalized: true }), y: FieldElement(FieldElementImpl { value: FieldElement5x52([2199641648059576, 1278080618437060, 3959378566518708, 3455034269351872, 79417610544803]), magnitude: 1, normalized: true }), z: FieldElement(FieldElementImpl { value: FieldElement5x52([1, 0, 0, 0, 0]), magnitude: 1, normalized: true }) }) })))) })) }) }, tokens: [], additional_registers: NonMandatoryRegisters([]), creation_height: 0, transaction_id: TxId(Digest32([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])), index: 0 }], outputs = [ErgoBoxCandidate { value: BoxValue(20403935), ergo_tree: ErgoTree { header: ErgoTreeHeader(0), tree: Ok(ParsedTree { constants: [], root: Ok(Const(Constant { tpe: SSigmaProp, v: SigmaProp(SigmaProp(ProofOfKnowledge(ProveDlog(ProveDlog { h: EcPoint(ProjectivePoint { x: FieldElement(FieldElementImpl { value: FieldElement5x52([705178180786072, 3855836460717471, 4089131105950716, 3301581525494108, 133858670344668]), magnitude: 1, normalized: true }), y: FieldElement(FieldElementImpl { value: FieldElement5x52([2199641648059576, 1278080618437060, 3959378566518708, 3455034269351872, 79417610544803]), magnitude: 1, normalized: true }), z: FieldElement(FieldElementImpl { value: FieldElement5x52([1, 0, 0, 0, 0]), magnitude: 1, normalized: true }) }) })))) })) }) }, tokens: [], additional_registers: NonMandatoryRegisters([]), creation_height: 0 }], change_address = P2PK(ProveDlog { h: EcPoint(ProjectivePoint { x: FieldElement(FieldElementImpl { value: FieldElement5x52([705178180786072, 3855836460717471, 4089131105950716, 3301581525494108, 133858670344668]), magnitude: 1, normalized: true }), y: FieldElement(FieldElementImpl { value: FieldElement5x52([2199641648059576, 1278080618437060, 3959378566518708, 3455034269351872, 79417610544803]), magnitude: 1, normalized: true }), z: FieldElement(FieldElementImpl { value: FieldElement5x52([1, 0, 0, 0, 0]), magnitude: 1, normalized: true }) }) }), miners_fee = BoxValue(1839823)
cc 4343e84399d6da07ff8bcf4d964e8f955306d4cf98f105c391ed1588ca4def25 # shrinks to inputs = [ErgoBox { box_id: BoxId("2fcc49cd3f0fb0dc051536575e151e3a4bba3e0aa98c6ed5894335fb4266474b"), value: BoxValue(54000000), ergo_tree: ErgoTree { header: ErgoTreeHeader(0), tree: Ok(ParsedTree { constants: [], root: Ok(Const(Constant { tpe: SSigmaProp, v: SigmaProp(SigmaProp(ProofOfKnowledge(ProveDlog(ProveDlog { h: EC:0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798 })))) })) }) }, tokens: [], additional_registers: NonMandatoryRegisters([Constant { tpe: STuple(STuple { items: BoundedVec { inner: [SColl(SByte), SGroupElement, SSigmaProp] } }), v: Tup(BoundedVec { inner: [Coll(NativeColl(CollByte([-37, 21, 126, 114, 50, -69, 70, -99, 111, -117, -27, 71, -67, -113, -80, 3, 108, 0, -20, -101, 93, 99, -119, 96, 32, -50, -82, -59, 94, -58, 100, -5, -2, -110, 124, -124, -54, 23, 123, -17, 67, -18, 117, 116, 94, -40, 9, 113, -39, -63, -33, -18, 21, -109, -64, -23, -66, 68, 109, -8, 37, 63, 55, 80, -56, -18, -18, -84, 14, -87, 50, -34]))), GroupElement(EC:000000000000000000000000000000000000000000000000000000000000000000), SigmaProp(SigmaProp(SigmaConjecture(Cand(Cand { items: BoundedVec { inner: [ProofOfKnowledge(ProveDhTuple(ProveDhTuple { g: EC:000000000000000000000000000000000000000000000000000000000000000000, h: EC:000000000000000000000000000000000000000000000000000000000000000000, u: EC:000000000000000000000000000000000000000000000000000000000000000000, v: EC:000000000000000000000000000000000000000000000000000000000000000000 })), ProofOfKnowledge(ProveDlog(ProveDlog { h: EC:000000000000000000000000000000000000000000000000000000000000000000 })), ProofOfKnowledge(ProveDhTuple(ProveDhTuple { g: EC:0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798, h: EC:0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798, u: EC:0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798, v: EC:0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798 }))] } }))))] }) }, Constant { tpe: SColl(SBigInt), v: Coll(WrappedColl { elem_tpe: SBigInt, items: [BigInt(BigInt256(Int256(-3305632704798772324))), BigInt(BigInt256(Int256(-3305632704798772324)))] }) }, Constant { tpe: SColl(SBoolean), v: Coll(WrappedColl { elem_tpe: SBoolean, items: [Boolean(false)] }) }]), creation_height: 0, transaction_id: TxId("3f77567114c29e0da67244e4a22720b11405a696804e960f1dfc8b5759ee5da6"), index: 12804 }], outputs = [ErgoBoxCandidate { value: BoxValue(14049207), ergo_tree: ErgoTree { header: ErgoTreeHeader(9), tree: Ok(ParsedTree { constants: [], root: Ok(Const(Constant { tpe: SSigmaProp, v: SigmaProp(SigmaProp(ProofOfKnowledge(ProveDlog(ProveDlog { h: EC:000000000000000000000000000000000000000000000000000000000000000000 })))) })) }) }, tokens: [], additional_registers: NonMandatoryRegisters([Constant { tpe: SColl(SSigmaProp), v: Coll(WrappedColl { elem_tpe: SSigmaProp, items: [] }) }, Constant { tpe: SColl(SGroupElement), v: Coll(WrappedColl { elem_tpe: SGroupElement, items: [GroupElement(EC:0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798), GroupElement(EC:0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798), GroupElement(EC:0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798), GroupElement(EC:0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798), GroupElement(EC:0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798), GroupElement(EC:0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798), GroupElement(EC:0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798), GroupElement(EC:0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798), GroupElement(EC:0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798), GroupElement(EC:0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798)] }) }, Constant { tpe: SColl(SInt), v: Coll(WrappedColl { elem_tpe: SInt, items: [] }) }, Constant { tpe: SColl(SColl(SByte)), v: Coll(WrappedColl { elem_tpe: SColl(SByte), items: [Coll(NativeColl(CollByte([8, -43, -88, -112, 93, -4, -22, 0, 43, 53, 127, -70, 73, -24, 49, -94, -92, 91, 5, 20, -100, 96, -8, -14, 9, -47, -87, 12, 61, -114, -55, -104, 100, 17, 35, -105, -72, 105, 108, 99, -27, -34, -4, 19, 70, 100, -72, -50, -55, 52, 19, 8, 113, 127, -76, -6, 16, 79, -18, 20, -80, -27, 108, -83, 19, -49, 96, -70, 69, 21, 70, -66, -97, -116, -125, 72, 23, 125, 94, -70, -37])))] }) }, Constant { tpe: SColl(SShort), v: Coll(WrappedColl { elem_tpe: SShort, items: [Short(-30184), Short(-30184)] }) }]), creation_height: 121257243 }], change_address = P2S([16, 2, 8, 150, 2, 206, 2, 121, 190, 102, 126, 249, 220, 187, 172, 85, 160, 98, 149, 206, 135, 11, 7, 2, 155, 252, 219, 45, 206, 40, 217, 89, 242, 129, 91, 22, 248, 23, 152, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 121, 190, 102, 126, 249, 220, 187, 172, 85, 160, 98, 149, 206, 135, 11, 7, 2, 155, 252, 219, 45, 206, 40, 217, 89, 242, 129, 91, 22, 248, 23, 152, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 206, 2, 121, 190, 102, 126, 249, 220, 187, 172, 85, 160, 98, 149, 206, 135, 11, 7, 2, 155, 252, 219, 45, 206, 40, 217, 89, 242, 129, 91, 22, 248, 23, 152, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 121, 190, 102, 126, 249, 220, 187, 172, 85, 160, 98, 149, 206, 135, 11, 7, 2, 155, 252, 219, 45, 206, 40, 217, 89, 242, 129, 91, 22, 248, 23, 152, 2, 121, 190, 102, 126, 249, 220, 187, 172, 85, 160, 98, 149, 206, 135, 11, 7, 2, 155, 252, 219, 45, 206, 40, 217, 89, 242, 129, 91, 22, 248, 23, 152, 8, 206, 2, 121, 190, 102, 126, 249, 220, 187, 172, 85, 160, 98, 149, 206, 135, 11, 7, 2, 155, 252, 219, 45, 206, 40, 217, 89, 242, 129, 91, 22, 248, 23, 152, 2, 121, 190, 102, 126, 249, 220, 187, 172, 85, 160, 98, 149, 206, 135, 11, 7, 2, 155, 252, 219, 45, 206, 40, 217, 89, 242, 129, 91, 22, 248, 23, 152, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 121, 190, 102, 126, 249, 220, 187, 172, 85, 160, 98, 149, 206, 135, 11, 7, 2, 155, 252, 219, 45, 206, 40, 217, 89, 242, 129, 91, 22, 248, 23, 152, 235, 2, 115, 0, 115, 1]), miners_fee = BoxValue(2093460), data_inputs = []
